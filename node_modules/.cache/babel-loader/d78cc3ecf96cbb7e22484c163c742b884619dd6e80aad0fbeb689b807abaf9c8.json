{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\82102\\\\Desktop\\\\react\\\\reactproject\\\\src\\\\component\\\\Hello.js\",\n  _s = $RefreshSig$();\n// const Hello = () => {\n//    <p>Hello</p>\n// };\n// export default Hello;\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Hello(props) {\n  _s();\n  // function showName() {\n  //    console.log(\"Mike\");\n  // }\n\n  // function showAge(age) {\n  //    console.log(age);\n  // }\n  // <button onClick={showName}>Show name</button>\n  // <button onClick={() => {\n  //       showAge(10);\n  //    }}\n  // > Show age </button>\n\n  //----------------------------------------------------------------\n\n  // function showText(e) {\n  //    console.log(e.target.value) \n  //  e= event를 뜻한다.\n  //  target= input 전체 태그를 뜻한다\n  //  value= input에 작성한 값을 뜻한다 onChange 안에 값을 뜻함\n  // }\n\n  // <input type=\"text\" onChange={(e) => {\n  //    console.log(e.target.value)\n  // onChange = 입력할때마다 값이 콘솔창에 출력됨 \n  // }}/>\n\n  // function showText(txt) {\n  //    console.log(txt);\n  // }\n  // <input type=\"text\" onChange={(e) => {\n  //    const txt = e.target.value;\n  //    showText(txt);\n  // }}/>\n  //-------------------------------------------------------------\n  // 방법1  let name = \"Mike\"; \n\n  const [name, setName] = useState('Mike');\n\n  // const [age, setAge] = useState(props.age);\n  // useState는 배열을 반환한다.\n  // 배열의 첫번째 값은 state이고 변수명이다. [name]\n  // 배열의 두번째 값은 state[name] 을 변경해주는 함수\n\n  // function changeName() {\n  //방법1\n  //  name = name === \"Mike\" ? \"Jane\" : \"Mike\";\n  //  document.getElementById(\"name\").innerText = name;\n  //  화면 업데이틑해주는 자바스크립트 코드 \n\n  //방법2\n  // const newName = name === \"Mike\" ? \"Jane\" : \"Mike\";\n  // setName(newName); \n\n  //방법3\n  // setName(name ===\"Mike\" ? \"Jane\" : \"Mike\");\n\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"name\",\n      children: [name, \"(\", age, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setName(name === \"Mike\" ? \"Jane\" : \"Mike\");\n        setAge(age + 1);\n      },\n      children: \"Change\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 4\n  }, this);\n}\n_s(Hello, \"vq9LVp+D/peVlZ+RYLShVPXzOz8=\");\n_c = Hello;\nvar _c;\n$RefreshReg$(_c, \"Hello\");","map":{"version":3,"names":["useState","Hello","props","name","setName","age","setAge"],"sources":["C:/Users/82102/Desktop/react/reactproject/src/component/Hello.js"],"sourcesContent":["// const Hello = () => {\r\n//    <p>Hello</p>\r\n// };\r\n// export default Hello;\r\n\r\nimport {useState} from \"react\";\r\n\r\nexport default function Hello(props) {\r\n\r\n   // function showName() {\r\n   //    console.log(\"Mike\");\r\n   // }\r\n\r\n   // function showAge(age) {\r\n   //    console.log(age);\r\n   // }\r\n   // <button onClick={showName}>Show name</button>\r\n   // <button onClick={() => {\r\n   //       showAge(10);\r\n   //    }}\r\n   // > Show age </button>\r\n\r\n//----------------------------------------------------------------\r\n\r\n   // function showText(e) {\r\n   //    console.log(e.target.value) \r\n   //  e= event를 뜻한다.\r\n   //  target= input 전체 태그를 뜻한다\r\n   //  value= input에 작성한 값을 뜻한다 onChange 안에 값을 뜻함\r\n   // }\r\n\r\n   // <input type=\"text\" onChange={(e) => {\r\n   //    console.log(e.target.value)\r\n   // onChange = 입력할때마다 값이 콘솔창에 출력됨 \r\n   // }}/>\r\n\r\n   // function showText(txt) {\r\n   //    console.log(txt);\r\n   // }\r\n   // <input type=\"text\" onChange={(e) => {\r\n   //    const txt = e.target.value;\r\n   //    showText(txt);\r\n   // }}/>\r\n//-------------------------------------------------------------\r\n   // 방법1  let name = \"Mike\"; \r\n   \r\n\r\n   const [name, setName] = useState('Mike');\r\n   \r\n   // const [age, setAge] = useState(props.age);\r\n   // useState는 배열을 반환한다.\r\n   // 배열의 첫번째 값은 state이고 변수명이다. [name]\r\n   // 배열의 두번째 값은 state[name] 을 변경해주는 함수\r\n\r\n// function changeName() {\r\n   //방법1\r\n   //  name = name === \"Mike\" ? \"Jane\" : \"Mike\";\r\n   //  document.getElementById(\"name\").innerText = name;\r\n   //  화면 업데이틑해주는 자바스크립트 코드 \r\n\r\n   //방법2\r\n   // const newName = name === \"Mike\" ? \"Jane\" : \"Mike\";\r\n   // setName(newName); \r\n   \r\n   //방법3\r\n   // setName(name ===\"Mike\" ? \"Jane\" : \"Mike\");\r\n                                                                                                  \r\n// }\r\n\r\n  return (\r\n   <div>\r\n      <h2 id=\"name\">\r\n         {/* {name}({props.age}) */}\r\n         {/* 예:(나이) 컴포넌트 내부에서 값을 변경할수없다.\r\n         그러므로 state를 활용하여 변경해주어야한다. */}\r\n         {name}({age})\r\n      </h2>\r\n      {/* <button onClick={changeName}>Change</button> */}                                                                                                           \r\n      <button onClick={()=>{\r\n         setName(name ===\"Mike\" ? \"Jane\" : \"Mike\");\r\n         setAge(age + 1);\r\n      }}>Change</button>\r\n   </div>\r\n  );\r\n}"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA,SAAQA,QAAQ,QAAO,OAAO;AAAC;AAE/B,eAAe,SAASC,KAAK,CAACC,KAAK,EAAE;EAAA;EAElC;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEH;;EAEG;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACH;EACG;;EAGA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGJ,QAAQ,CAAC,MAAM,CAAC;;EAExC;EACA;EACA;EACA;;EAEH;EACG;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEH;;EAEE,oBACC;IAAA,wBACG;MAAI,EAAE,EAAC,MAAM;MAAA,WAITG,IAAI,OAAGE,GAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QACT,eAEL;MAAQ,OAAO,EAAE,MAAI;QAClBD,OAAO,CAACD,IAAI,KAAI,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;QACzCG,MAAM,CAACD,GAAG,GAAG,CAAC,CAAC;MAClB,CAAE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAgB;EAAA;IAAA;IAAA;IAAA;EAAA,QACf;AAET;AAAC,GA7EuBJ,KAAK;AAAA,KAALA,KAAK;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}